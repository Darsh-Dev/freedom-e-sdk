sudo: required

# Travis doesn't provide a wide variety of host environments to run on, so we
# rely on Docker to provide these instead.
services:
  - docker

# It is not really needed, other than for showing correct language tag in
# Travis CI build log.
language: c

# The matrix of targets that we're interested in.
env:
  - HOST="ubuntu:16.04"
  - HOST="ubuntu:16.04" RISCV_CFLAGS="-std=c99 -Wall -Wextra -Wpedantic -Werror -Wno-unused-parameter"

# Before running the install phase we need to set up docker container that runs
# the target machine.
before_install:
# Spin up container
  - docker run -d --name host -v $(pwd):/travis $HOST tail -f /dev/null
  - docker ps

# Update the container and install dependencies
install:
  - docker exec -t host bash -c "apt-get update"
  - docker exec -t host bash -c "apt-get upgrade -y"
  - docker exec -t host bash -c "apt-get install -y build-essential git wget rsync jq"
# Install QEMU dependencies
  - docker exec -t host bash -c "apt-get install -y libpixman-1-0 libnuma1 libpng12-0 libglib2.0-0 libjpeg8"
# Download RISC-V embedded toolchain
  - docker exec -t host bash -c "wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14.tar.gz"
  - docker exec -t host bash -c "tar xzvf riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14.tar.gz"
  - docker exec -t host bash -c "mkdir -p /tools && rsync -a riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14/* /tools/"
# Download RISC-V QEMU
  - docker exec -t host bash -c "wget https://static.dev.sifive.com/dev-tools/riscv-qemu-4.1.0-2019.08.0-x86_64-linux-ubuntu14.tar.gz"
  - docker exec -t host bash -c "tar xzvf riscv-qemu-4.1.0-2019.08.0-x86_64-linux-ubuntu14.tar.gz"
  - docker exec -t host bash -c "mkdir -p /tools && rsync -a riscv-qemu-4.1.0-2019.08.0-x86_64-linux-ubuntu14/* /tools/"

# Here's where we actually run the test.
script:
# check that submodules match wit-manifest.json
  - docker exec -t host bash -c "cd /travis && ./scripts/check-submodules"
# Build all software for all targets
  - docker exec -t host bash -c "cd /travis && PATH=/tools/bin:\$PATH RISCV_CFLAGS=\"$RISCV_CFLAGS\" ./scripts/all-targets-build"
# Test by running software on all QEMU targets
  - docker exec -t host bash -c "cd /travis && PATH=/tools/bin:\$PATH RISCV_CFLAGS=\"$RISCV_CFLAGS\" ./scripts/test-qemu-targets"
